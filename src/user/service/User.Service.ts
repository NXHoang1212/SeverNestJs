import { Inject, Injectable } from "@nestjs/common";
import { InjectModel } from "@nestjs/mongoose";
import { Model, set } from "mongoose";
import { User, UserDocument } from "../model/User.Schema";
import { RegisterRequestUser } from "../dto/req/RegisterUser.Request";
import { LoginRequestUser } from "../dto/req/LoginUser.Request";
import { AllResponUser } from "../dto/res/AllUser.Response";
import { UpdateUserByIdRespon } from "../dto/res/UpdateUser.Response";
import { UpdateUserByIdRequest } from "../dto/req/UpdateUser.Request";
import { ForgotPasswordRequest } from "../dto/req/Password.Request";
import { ForgotPasswordRespon } from "../dto/res/Password.Response";
import * as bcrypt from 'bcrypt';
import { JwtService } from "@nestjs/jwt";
import { MailerService } from '@nestjs-modules/mailer';
import { GenerateOTP } from "src/utils/function/GenerateOTP";
import { ClearExpiredOTPService } from "src/utils/task/ClearTimeOTP";

@Injectable()
export class UserService {
    constructor(@InjectModel(User.name)
    private readonly userModel: Model<UserDocument>,
        private readonly jwtService: JwtService,
        private readonly mailerService: MailerService) { }

    //h√†m ƒëƒÉng k√Ω t√†i kho·∫£n
    async register(request: RegisterRequestUser): Promise<AllResponUser> {
        try {
            //ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a v√† hash password
            const user = await this.userModel.findOne({ email: request.email });
            if (user) {
                throw new Error('Email ƒë√£ t·ªìn t·∫°i');
            }
            //hash password 10 l·∫ßn l√† 10 l·∫ßn bcrypt.hash
            const salt = await bcrypt.genSalt(10);
            //l√† password ƒë√£ ƒë∆∞·ª£c hash b·∫±ng bcrypt
            const hashPassword = await bcrypt.hash(request.password, salt);
            //t·∫°o m·ªõi user
            const { fullname, email, password, confirmPassword } = request;
            const NewUser = new this.userModel({ fullname, email, password: hashPassword });
            //ki·ªÉm tra password v√† confirm password c√≥ gi·ªëng nhau kh√¥ng
            if (password !== confirmPassword) {
                throw new Error('M·∫≠t kh·∫©u kh√¥ng kh·ªõp');
            }
            //tr·∫£ v·ªÅ k·∫øt qu·∫£
            await NewUser.save();
            const allResponUser: AllResponUser = {
                status: true,
                message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
                data: NewUser
            };
            return allResponUser;
        } catch (error: any) {
            console.log("üöÄ ~ file: UserService.ts ~ line 58 ~ UserService ~ register ~ error", error)
            const allResponUser: AllResponUser = {
                status: false,
                message: 'ƒêƒÉng k√Ω th·∫•t b·∫°i',
                data: null
            };
            return allResponUser;
        }
    }

    //h√†m ƒëƒÉng nh·∫≠p
    async login(request: LoginRequestUser): Promise<AllResponUser> {
        try {
            const { email, password } = request;
            const user = await this.userModel.findOne({ email });
            if (!user) {
                throw new Error('Email kh√¥ng t·ªìn t·∫°i');
            }
            //ki·ªÉm tra password
            const isMatch = await bcrypt.compare(password, user.password);
            if (!isMatch) {
                throw new Error('M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
            }
            //t·∫°o token cho user v√† token ƒë√≥ tr·∫£ v·ªÅ s·∫Ω c√≥ l√† token.data v√† data l√† th√¥ng tin to√†n b·ªô user
            const token = await this.jwtService.sign({ data: user });
            // Tr·∫£ v·ªÅ k·∫øt qu·∫£ bao g·ªìm token v√† th√¥ng tin user
            const allResponUser: AllResponUser = {
                status: true,
                message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
                data: { token, user }
            };
            return allResponUser;
        } catch (error: any) {
            console.log("üöÄ ~ file: UserService.ts:75 ~ UserService ~ login ~ error:", error)
            const allResponUser: AllResponUser = {
                status: false,
                message: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',
                data: null
            }
            return allResponUser;
        }
    }

    //h√†m l·∫•y th√¥ng tin id user
    async getUserById(id: String): Promise<AllResponUser> {
        try {
            const user = await this.userModel.findById(id);
            if (!user) {
                throw new Error('Kh√¥ng t√¨m th·∫•y user');
            }
            const allResponUser: AllResponUser = {
                status: true,
                message: 'L·∫•y th√¥ng tin user th√†nh c√¥ng',
                data: user
            };
            return allResponUser;
        } catch (error: any) {
            console.log("üöÄ ~ file: UserService.ts:103 ~ UserService ~ getUserById ~ error", error)
            const allResponUser: AllResponUser = {
                status: false,
                message: 'L·∫•y th√¥ng tin user th·∫•t b·∫°i',
                data: null
            };
            return allResponUser;
        }
    }

    //h√†m update th√¥ng tin user
    async updateUserById(id: String, request: UpdateUserByIdRequest): Promise<UpdateUserByIdRespon> {
        try {
            const user = await this.userModel.findById(id)
            if (!user) {
                throw new Error('Kh√¥ng t√¨m th·∫•y user');
            }
            const { fullname, avatar, mobile, gender, nickname, birthday } = request;
            user.fullname = fullname ? fullname : user.fullname;
            user.avatar = avatar ? avatar : user.avatar;
            user.mobile = mobile ? mobile : user.mobile;
            user.gender = gender ? gender : user.gender;
            user.nickname = nickname ? nickname : user.nickname;
            user.birthday = birthday ? birthday : user.birthday;
            const result = await user.save();
            const updateUserByIdRespon: UpdateUserByIdRespon = {
                status: true,
                message: 'C·∫≠p nh·∫≠t th√¥ng tin user th√†nh c√¥ng',
                data: result
            };
            return updateUserByIdRespon;
        } catch (error: any) {
            console.log("üöÄ ~ file: UserService.ts:133 ~ UserService ~ updateUserById ~ error", error)
            const updateUserByIdRespon: UpdateUserByIdRespon = {
                status: false,
                message: 'C·∫≠p nh·∫≠t th√¥ng tin user th·∫•t b·∫°i',
                data: null
            }
            return updateUserByIdRespon;
        }
    }

    //h√†m qu√™n m·∫≠t kh·∫©u v√† khi qu√™n s·∫Ω g·ª≠i mail
    async forgotPassword(email: String): Promise<ForgotPasswordRespon> {
        try {
            const user = await this.userModel.findOne({ email });
            if (!user) {
                throw new Error('Email kh√¥ng t·ªìn t·∫°i');
            }
            const otp = new GenerateOTP().generateOTP();
            user.resetOTP = otp; // L∆∞u OTP v√†o c∆° s·ªü d·ªØ li·ªáu
            await user.save();
            const sendMail = await this.mailerService.sendMail({
                to: email.toString(),
                subject: 'OTP to reset password',
                html: `<p>Your OTP to reset password is <b>${otp}</b></p>`,
            });
            // G·ªçi h√†m clearExpiredOTP ƒë·ªÉ x√≥a OTP h·∫øt h·∫°n sau 2 ph√∫t
            const clearExpiredOTPService = new ClearExpiredOTPService(this.userModel);
            setTimeout(async () => {
                await clearExpiredOTPService.clearExpiredOTP();
            }, 120000);
            const forgotPasswordRespon: ForgotPasswordRespon = {
                status: true,
                message: 'G·ª≠i mail th√†nh c√¥ng',
                data: sendMail
            };
            return forgotPasswordRespon;
        } catch (error) {
            console.error('L·ªói trong qu√° tr√¨nh g·ª≠i email:', error.message);
            const forgotPasswordRespon: ForgotPasswordRespon = {
                status: false,
                message: 'G·ª≠i mail th·∫•t b·∫°i',
                data: null
            };
            return forgotPasswordRespon;
        }
    }

    //h√†m x√°c nh·∫≠n otp sau khi x√°c nh·∫•nj otp s·∫Ω x√≥a kh·ªèi tr∆∞·ªùng resetOTP
    async verifyOtp(email: String, request: ForgotPasswordRequest): Promise<ForgotPasswordRespon> {
        try {
            const user = await this.userModel.findOne({ email });
            if (!user) {
                throw new Error('Email kh√¥ng t·ªìn t·∫°i');
            }
            //n·∫øu otp nh·∫≠p v√†o kh√¥ng tr√πng v·ªõi otp trong database th√¨ s·∫Ω b√°o l·ªói
            if (user.resetOTP !== request.otp) {
                throw new Error('OTP kh√¥ng ƒë√∫ng');
            }
            //n·∫øu otp nh·∫≠p v√†o tr√πng v·ªõi otp trong database th√¨ s·∫Ω hash password th√†nh null
            user.password = await bcrypt.hash('null', 10);
            // X√≥a OTP ƒë√£ s·ª≠ d·ª•ng
            user.resetOTP = undefined;
            await user.save();
            const forgotPasswordRespon: ForgotPasswordRespon = {
                status: true,
                message: 'X√°c nh·∫≠n OTP th√†nh c√¥ng',
                data: null
            };
            return forgotPasswordRespon;
        } catch (error) {
            console.error('L·ªói trong qu√° tr√¨nh x√°c nh·∫≠n OTP:', error.message);
            const forgotPasswordRespon: ForgotPasswordRespon = {
                status: false,
                message: 'X√°c nh·∫≠n OTP th·∫•t b·∫°i',
                data: null
            };
            return forgotPasswordRespon;
        }
    }

    //h√†m ƒë·ªïi m·∫≠t kh·∫©u
    async resetPassword(email: String, request: ForgotPasswordRequest): Promise<ForgotPasswordRespon> {
        try {
            const user = await this.userModel.findOne({ email });
            if (!user) {
                throw new Error('Email kh√¥ng t·ªìn t·∫°i');
            }
            //ki·ªÉm tra password v√† confirm password c√≥ gi·ªëng nhau kh√¥ng
            if (request.password !== request.confirmPassword) {
                throw new Error('M·∫≠t kh·∫©u kh√¥ng kh·ªõp');
            }
            //hash password 10 l·∫ßn l√† 10 l·∫ßn bcrypt.hash
            const salt = await bcrypt.genSalt(10);
            //l√† password ƒë√£ ƒë∆∞·ª£c hash b·∫±ng bcrypt
            const hashPassword = await bcrypt.hash(request.password, salt);
            user.password = hashPassword;
            await user.save();
            const forgotPasswordRespon: ForgotPasswordRespon = {
                status: true,
                message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng',
                data: null
            };
            return forgotPasswordRespon;

        } catch (error: any) {
            console.log("üöÄ ~ file: UserService.ts ~ line 262 ~ UserService ~ changePassword ~ error", error)
            const forgotPasswordRespon: ForgotPasswordRespon = {
                status: false,
                message: 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i',
                data: null
            };
            return forgotPasswordRespon;
        }
    }
}